import random
import tkinter as tk
from tkinter import messagebox, simpledialog
from time import time


class MinesweeperGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∞–ø—ë—Ä")  # –Ω–∞–∑–≤–∞–Ω–∏—è –æ–∫–Ω–∞ –¥–ª—è –∏–≥—Ä—ã —Å–∞–ø–µ—Ä

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        self.grid_size = 9
        self.max_bombs = 80
        self.min_bombs = 1
        self.default_bombs = 10
        self.bomb_count = self.default_bombs

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.flags = set()
        self.correct_flags = set()
        self.first_click = True
        self.game_started = False
        self.start_time = 0

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Ç–∞–π–º–µ—Ä)
        self.timer_label = None
        self.buttons = []

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_menu()
        self.create_game_interface()
        self.init_game()

    def create_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∏–≥—Ä—ã"""
        menubar = tk.Menu(self.root)

        game_menu = tk.Menu(menubar, tearoff=0)
        game_menu.add_command(label="–ù–æ–≤–∞—è –∏–≥—Ä–∞", command=self.start_new_game)
        game_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.change_settings)
        game_menu.add_separator()
        game_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        menubar.add_cascade(label="–ò–≥—Ä–∞", menu=game_menu)

        self.root.config(menu=menubar)

    def create_game_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ç–∞–π–º–µ—Ä –∏ –ø–æ–ª–µ)"""
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.timer_label = tk.Label(
            self.root,
            text="–í—Ä–µ–º—è: 0 —Å–µ–∫",
            font=('Calibri', 12)
        )
        self.timer_label.grid(row=0, column=0, columnspan=self.grid_size, sticky="ew")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–µ—Ç–æ–∫
        self.create_buttons()

    def init_game(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        self.game_started = False
        self.first_click = True
        self.flags = set()
        self.correct_flags = set()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç
        self.hidden_map = [[' ' for _ in range(self.grid_size)] for _ in range(self.grid_size)]
        self.mines = set()
        self.player_map = [['-' for _ in range(self.grid_size)] for _ in range(self.grid_size)]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.update_timer()
        self.update_buttons()

    def count_adjacent_mines(self, row, col):
        """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏"""
        count = 0
        for r in range(row - 1, row + 2):
            for c in range(col - 1, col + 2):
                if (0 <= r < self.grid_size and 0 <= c < self.grid_size and
                        self.hidden_map[r][c] == 'M'):
                    count += 1
        return count

    def place_mines(self, first_row, first_col):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –º–∏–Ω—ã –Ω–∞ –ø–æ–ª–µ, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä–≤–æ–π –∫–ª–µ—Ç–∫–∏ –∏ —Å–æ—Å–µ–¥–µ–π"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É –≤–æ–∫—Ä—É–≥ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
        safe_zone = set()
        for r in range(first_row - 1, first_row + 2):
            for c in range(first_col - 1, first_col + 2):
                if 0 <= r < self.grid_size and 0 <= c < self.grid_size:
                    safe_zone.add((r, c))

        # –†–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã
        self.mines = set()
        while len(self.mines) < self.bomb_count:
            r, c = random.randint(0, self.grid_size - 1), random.randint(0, self.grid_size - 1)
            if (r, c) not in safe_zone:
                self.mines.add((r, c))
                self.hidden_map[r][c] = 'M'

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–∞–º–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥)
        for r in range(self.grid_size):
            for c in range(self.grid_size):
                if self.hidden_map[r][c] != 'M':
                    count = self.count_adjacent_mines(r, c)
                    if count > 0:
                        self.hidden_map[r][c] = str(count)

    def create_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        self.buttons = []
        for row in range(self.grid_size):
            button_row = []
            for col in range(self.grid_size):
                btn = tk.Button(
                    self.root,
                    text=' ',
                    width=3,
                    height=1,
                    font=('Calibri', 12, 'bold'),
                    command=lambda r=row, c=col: self.on_left_click(r, c)
                )
                btn.bind('<Button-3>', lambda event, r=row, c=col: self.on_right_click(r, c))
                btn.grid(row=row + 1, column=col, sticky='nsew')  # +1 —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å —Ç–∞–π–º–µ—Ä–æ–º
                button_row.append(btn)
            self.buttons.append(button_row)

    def start_game_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã"""
        self.game_started = True
        self.start_time = time()
        self.update_timer()

    def update_timer(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"""
        if self.game_started:
            elapsed = int(time() - self.start_time)
            self.timer_label.config(text=f"–í—Ä–µ–º—è: {elapsed} —Å–µ–∫")
            self.root.after(1000, self.update_timer)
        else:
            self.timer_label.config(text="–í—Ä–µ–º—è: 0 —Å–µ–∫")

    def on_left_click(self, row, col):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–µ–≤—ã–π –∫–ª–∏–∫ –º—ã—à–∏ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏)"""
        if (row, col) in self.flags:  # –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ —Ñ–ª–∞–∂–∫–∞–º–∏ –∫–ª–µ—Ç–∫–∏
            return

        if self.first_click:
            self.place_mines(row, col)
            self.start_game_timer()
            self.first_click = False

        if self.hidden_map[row][col] == 'M':
            self.game_over(False)
            return

        self.reveal_cells(row, col)
        self.update_buttons()

        if self.check_win():
            self.game_over(True)

    def on_right_click(self, row, col):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –º—ã—à–∏ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞)"""
        if self.player_map[row][col] != '-':  # –ù–µ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
            return

        if (row, col) in self.flags:
            self.flags.remove((row, col))
            if (row, col) in self.correct_flags:
                self.correct_flags.remove((row, col))
        else:
            self.flags.add((row, col))
            if self.hidden_map[row][col] == 'M':
                self.correct_flags.add((row, col))

        self.update_buttons()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É (–≤—Å–µ –º–∏–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã)
        if (len(self.correct_flags) == self.bomb_count and
                len(self.flags) == self.bomb_count):
            self.game_over(True)

    def reveal_cells(self, row, col):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–µ—Ç–∫–∏"""
        if not (0 <= row < self.grid_size and 0 <= col < self.grid_size) or self.player_map[row][col] != '-':
            return

        self.player_map[row][col] = self.hidden_map[row][col]

        # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π
        if self.hidden_map[row][col] == ' ':
            for r in range(row - 1, row + 2):
                for c in range(col - 1, col + 2):
                    if r != row or c != col:  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—É –∫–ª–µ—Ç–∫—É
                        self.reveal_cells(r, c)

    def update_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã"""
        for row in range(self.grid_size):
            for col in range(self.grid_size):
                if (row, col) in self.flags:
                    self.buttons[row][col].config(text='üö©', fg='red', bg='SystemButtonFace')
                elif self.player_map[row][col] == '-':
                    self.buttons[row][col].config(text=' ', bg='SystemButtonFace')
                else:
                    cell = self.player_map[row][col]
                    self.buttons[row][col].config(text=cell, bg='light gray')

                    # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ü–∏—Ñ—Ä
                    if cell.isdigit():
                        num = int(cell)
                        colors = ['', 'blue', 'green', 'red', 'dark blue',
                                  'brown', 'teal', 'black', 'gray']
                        self.buttons[row][col].config(fg=colors[num])

    def check_win(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã"""
        # –í—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã
        for row in range(self.grid_size):
            for col in range(self.grid_size):
                if self.hidden_map[row][col] != 'M' and self.player_map[row][col] == '-':
                    return False
        return True

    def game_over(self, won):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        self.game_started = False

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
        for row in range(self.grid_size):
            for col in range(self.grid_size):
                if self.hidden_map[row][col] == 'M':
                    self.buttons[row][col].config(
                        text='üí£',
                        bg='light green' if won else 'orange'
                    )

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        for row in range(self.grid_size):
            for col in range(self.grid_size):
                self.buttons[row][col].config(state='disabled')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if won:
            elapsed = int(time() - self.start_time)
            messagebox.showinfo("–ü–æ–±–µ–¥–∞!", f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∑–∞ {elapsed} —Å–µ–∫—É–Ω–¥!")
        else:
            messagebox.showinfo("–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–í—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –º–∏–Ω—É!")

    def start_new_game(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        self.init_game()

    def change_settings(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω)"""
        bombs = simpledialog.askinteger(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω",
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω ({self.min_bombs}-{self.max_bombs}):",
            parent=self.root,
            minvalue=self.min_bombs,
            maxvalue=self.max_bombs,
            initialvalue=self.bomb_count
        )

        if bombs is not None:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
            self.bomb_count = bombs
            self.start_new_game()


if __name__ == "__main__":
    root = tk.Tk()
    game = MinesweeperGUI(root)
    root.mainloop()
