import random
import tkinter as tk
from tkinter import messagebox


class MinesweeperGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∞–ø—ë—Ä")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.size = 9
        self.bomb_count = 10
        self.flags = set()
        self.correct_flags = set()
        self.first_click = True

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.create_menu()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        self.init_game()

    def create_menu(self):
        menubar = tk.Menu(self.root)

        game_menu = tk.Menu(menubar, tearoff=0)
        game_menu.add_command(label="–ù–æ–≤–∞—è –∏–≥—Ä–∞", command=self.new_game)
        game_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        menubar.add_cascade(label="–ò–≥—Ä–∞", menu=game_menu)

        self.root.config(menu=menubar)

    def init_game(self):
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        self.create_board()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–µ—Ç–æ–∫
        self.create_buttons()

    def create_board(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –º–∏–Ω–∞–º–∏
        self.hidden_map = [[' ' for _ in range(self.size)] for _ in range(self.size)]
        self.mines = set()

        # –ö–∞—Ä—Ç–∞, –≤–∏–¥–∏–º–∞—è –∏–≥—Ä–æ–∫—É
        self.player_map = [['-' for _ in range(self.size)] for _ in range(self.size)]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.display_map = [[' '] + list(range(1, self.size + 1))]
        for i in range(self.size):
            self.display_map.append([i + 1] + self.player_map[i])

    def place_mines(self, first_x, first_y):
        """–ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–º–µ—â–∞–µ—Ç –º–∏–Ω—ã, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä–≤–æ–π –Ω–∞–∂–∞—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –∏ —Å–æ—Å–µ–¥–µ–π"""
        safe_zone = set()
        directions = [(-1, -1), (-1, 0), (-1, 1),
                      (0, -1), (0, 0), (0, 1),
                      (1, -1), (1, 0), (1, 1)]

        for dx, dy in directions:
            nx, ny = first_x + dx, first_y + dy
            if 0 <= nx < self.size and 0 <= ny < self.size:
                safe_zone.add((nx, ny))

        while len(self.mines) < self.bomb_count:
            x, y = random.randint(0, self.size - 1), random.randint(0, self.size - 1)
            if (x, y) not in safe_zone:
                self.mines.add((x, y))
                self.hidden_map[x][y] = 'M'

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–∞–º–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥)
        for x in range(self.size):
            for y in range(self.size):
                if self.hidden_map[x][y] != 'M':
                    count = 0
                    for dx, dy in directions:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < self.size and 0 <= ny < self.size:
                            if self.hidden_map[nx][ny] == 'M':
                                count += 1
                    if count > 0:
                        self.hidden_map[x][y] = str(count)

    def create_buttons(self):
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        for widget in self.root.grid_slaves():
            widget.destroy()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
        self.buttons = []
        for x in range(self.size):
            row = []
            for y in range(self.size):
                btn = tk.Button(
                    self.root,
                    text=' ',
                    width=3,
                    height=1,
                    font=('Arial', 12, 'bold'),
                    command=lambda x=x, y=y: self.on_click(x, y)
                )
                btn.bind('<Button-3>', lambda event, x=x, y=y: self.on_right_click(x, y))
                btn.grid(row=x, column=y, sticky='nsew')
                row.append(btn)
            self.buttons.append(row)

    def on_click(self, x, y):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–≤–æ–≥–æ –∫–ª–∏–∫–∞ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏)"""
        if self.first_click:
            self.place_mines(x, y)
            self.first_click = False

        if (x, y) in self.flags:
            return

        if self.hidden_map[x][y] == 'M':
            self.game_over(False)
            return

        self.reveal_cells(x, y)
        self.update_buttons()

        if self.check_win():
            self.game_over(True)

    def on_right_click(self, x, y):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞)"""
        if self.player_map[x][y] != '-':
            return

        if (x, y) in self.flags:
            self.flags.remove((x, y))
            if (x, y) in self.correct_flags:
                self.correct_flags.remove((x, y))
        else:
            self.flags.add((x, y))
            if self.hidden_map[x][y] == 'M':
                self.correct_flags.add((x, y))

        self.update_buttons()

        if len(self.correct_flags) == self.bomb_count and len(self.flags) == self.bomb_count:
            self.game_over(True)

    def reveal_cells(self, x, y):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–æ–∫"""
        if not (0 <= x < self.size and 0 <= y < self.size) or self.player_map[x][y] != '-':
            return

        self.player_map[x][y] = self.hidden_map[x][y]

        if self.hidden_map[x][y] == ' ':
            directions = [(-1, -1), (-1, 0), (-1, 1),
                          (0, -1), (0, 1),
                          (1, -1), (1, 0), (1, 1)]
            for dx, dy in directions:
                self.reveal_cells(x + dx, y + dy)

    def update_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–æ–∫"""
        for x in range(self.size):
            for y in range(self.size):
                if (x, y) in self.flags:
                    self.buttons[x][y].config(text='üö©', fg='red')
                elif self.player_map[x][y] == '-':
                    self.buttons[x][y].config(text=' ', bg='SystemButtonFace')
                else:
                    cell = self.player_map[x][y]
                    self.buttons[x][y].config(text=cell, bg='light gray')

                    # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ü–∏—Ñ—Ä
                    if cell.isdigit():
                        num = int(cell)
                        colors = ['', 'blue', 'green', 'red', 'dark blue',
                                  'brown', 'teal', 'black', 'gray']
                        self.buttons[x][y].config(fg=colors[num])

    def check_win(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã"""
        # –í—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã
        for x in range(self.size):
            for y in range(self.size):
                if self.hidden_map[x][y] != 'M' and self.player_map[x][y] == '-':
                    return False
        return True

    def game_over(self, won):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
        for x in range(self.size):
            for y in range(self.size):
                if self.hidden_map[x][y] == 'M':
                    self.buttons[x][y].config(text='Bomb', bg='orange' if not won else 'light green')

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        for x in range(self.size):
            for y in range(self.size):
                self.buttons[x][y].config(state='disabled')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if won:
            messagebox.showinfo("–ü–æ–±–µ–¥–∞!", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
        else:
            messagebox.showinfo("–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–í—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –º–∏–Ω—É!")

    def new_game(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
        self.get_bomb_count()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.first_click = True
        self.flags = set()
        self.correct_flags = set()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        self.create_board()
        self.create_buttons()

    def get_bomb_count(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ"""
        while True:
            try:
                count = tk.simpledialog.askinteger(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω",
                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω (1-80):",
                    parent=self.root,
                    minvalue=1,
                    maxvalue=80
                )
                if count is None:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
                    count = 10
                self.bomb_count = count
                break
            except:
                pass


if __name__ == "__main__":
    root = tk.Tk()
    game = MinesweeperGUI(root)
    root.mainloop()